import React, { useEffect, useState } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid
} from 'recharts';
import { fetchActivityChartData } from './ActivityChartData';
import { chartTitleStyle, getToggleButtonStyle } from '../chartStyles';

function ActivityChart({ folder }) {
  const [chartType, setChartType] = useState('hour'); // 'hour' –∞–±–æ 'day'
  const [dataMap, setDataMap] = useState({ hour: [], day: [] });
  const [loadingMap, setLoadingMap] = useState({ hour: false, day: false });
  const [errorMap, setErrorMap] = useState({ hour: null, day: null });

  useEffect(() => {
    if (!folder) return;

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    const loadData = async (type) => {
      setLoadingMap(prev => ({ ...prev, [type]: true }));
      setErrorMap(prev => ({ ...prev, [type]: null }));

      try {
        const data = await fetchActivityChartData(type, folder);
        setDataMap(prev => ({ ...prev, [type]: data }));
      } catch (e) {
        setErrorMap(prev => ({ ...prev, [type]: e.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è' }));
        setDataMap(prev => ({ ...prev, [type]: [] }));
      } finally {
        setLoadingMap(prev => ({ ...prev, [type]: false }));
      }
    };

    // –û–¥–Ω–æ—á–∞—Å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±–æ—Ö —Ç–∏–ø—ñ–≤
    loadData('hour');
    loadData('day');
  }, [folder]);

  const loading = loadingMap[chartType];
  const error = errorMap[chartType];
  const data = dataMap[chartType];

  return (
    <div style={{ width: 500, height: 350 }}>
      <h2 style={chartTitleStyle}>
        {chartType === 'hour' ? 'üìä –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –≥–æ–¥–∏–Ω–∞–º–∏' : 'üìÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è'}
      </h2>

      <div style={{ marginBottom: 12, gap: 8, display: 'flex', flexWrap: 'wrap' }}>
        <button
          onClick={() => setChartType('hour')}
          style={getToggleButtonStyle(chartType === 'hour')}
          disabled={loadingMap['hour']}
        >
          üìä –ó–∞ –≥–æ–¥–∏–Ω–∞–º–∏
        </button>
        <button
          onClick={() => setChartType('day')}
          style={getToggleButtonStyle(chartType === 'day')}
          disabled={loadingMap['day']}
        >
          üìÖ –ó–∞ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è
        </button>
      </div>

      {loading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && data.length > 0 && (
        <ResponsiveContainer width="100%" height={250}>
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="label" />
            <YAxis
              allowDecimals={false}
              label={{ value: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', angle: -90, position: 'insideLeft' }}
            />
            <Tooltip />
            <Bar dataKey="count" fill="#1976d2" />
          </BarChart>
        </ResponsiveContainer>
      )}

      {!loading && !error && data.length === 0 && <p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.</p>}
    </div>
  );
}

export default ActivityChart;